name: CI/CD to ECR & EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ github.event.repository.name }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  lint:
    name: Lint (flake8 + black --check)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          # If you have project deps:
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run flake8
        run: flake8 .

      - name: Run black check
        run: black --check .

  build_and_push:
    name: Build & Push Docker to ECR
    runs-on: ubuntu-latest
    needs: lint
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          LATEST_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

          echo "Building ${IMAGE_URI}"
          docker build -t "${IMAGE_URI}" -t "${LATEST_URI}" .

          echo "Pushing ${IMAGE_URI} and ${LATEST_URI}"
          docker push "${IMAGE_URI}"
          docker push "${LATEST_URI}"

      - name: Expose image URI for next job
        id: meta
        run: |
          echo "image_uri=${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    outputs:
      image_uri: ${{ steps.meta.outputs.image_uri }}

  deploy:
    name: Deploy on EC2 (pull from ECR & restart container)
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          port: ${{ secrets.EC2_PORT }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_SESSION_TOKEN,AWS_REGION,IMAGE_URI
          script_stop: true
          script: |
            set -euo pipefail

            # Parameters from workflow
            IMAGE_URI="${{ needs.build_and_push.outputs.image_uri }}"
            CONTAINER_NAME="app"

            echo "Using image: ${IMAGE_URI}"

            # Ensure dependencies exist on EC2
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker not found on EC2. Please install Docker first."
              exit 1
            fi

            # Login to ECR (requires AWS CLI & credentials/instance role)
            if command -v aws >/dev/null 2>&1; then
              aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "$(echo "${IMAGE_URI}" | cut -d/ -f1)"
            else
              echo "AWS CLI not found on EC2. Please install awscli or attach an instance role with ECR permissions and AWS CLI."
              exit 1
            fi

            # Pull latest image
            docker pull "${IMAGE_URI}"

            # Stop and remove previous container if running
            if docker ps -a --format '{{.Names}}' | grep -Eq "^${CONTAINER_NAME}\$"; then
              echo "Stopping existing container..."
              docker stop "${CONTAINER_NAME}" || true
              docker rm "${CONTAINER_NAME}" || true
            fi

            # Run container (customize ports/env as needed)
            docker run -d --name "${CONTAINER_NAME}" \
              -p 80:8000 \
              --restart unless-stopped \
              "${IMAGE_URI}"

            echo "Deployment complete."
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "Deployment to AWS EC2 completed successfully!"
          echo "Application is now live at: http://${{ secrets.EC2_HOST }}"
      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "Deployment to AWS EC2 failed!"
          echo "Please check the logs and try again." 
