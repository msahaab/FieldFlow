name: Deploy to AWS EC2

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options: [production, staging]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fieldflow-app

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests (compose)
        run: docker compose run --rm app sh -c "python manage.py test"

      - name: Lint (compose)
        run: docker compose run --rm app sh -c "flake8"

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push APP image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

      - name: Build, tag, and push PROXY image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}-proxy:$IMAGE_TAG ./proxy
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}-proxy:latest ./proxy
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}-proxy:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}-proxy:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR (for registry output)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            set -e

            # Pass env to the remote session
            export AWS_REGION=${{ env.AWS_REGION }}
            export ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ github.sha }}
            export ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}

            # Prepare deploy dir
            mkdir -p /opt/fieldflow

            # Fetch deploy script from this repo/branch
            curl -fsSL -o /opt/fieldflow/deploy-ec2.sh \
              https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/scripts/deploy-ec2.sh
            chmod +x /opt/fieldflow/deploy-ec2.sh

            # Run deployment (your script handles ECR login, compose up, migrations, etc.)
            /opt/fieldflow/deploy-ec2.sh

      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT || 22 }}
          script: |
            sleep 30
            if curl -f http://localhost/health/ || curl -f http://localhost:8000/health/; then
              echo "Deployment successful - Health check passed"
            else
              echo "Deployment failed - Health check failed"
              exit 1
            fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "Deployment to AWS EC2 completed successfully!"
          echo "Application is now live at: http://${{ secrets.EC2_HOST }}"

      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "Deployment to AWS EC2 failed!"
          echo "Please check the logs and try again."
